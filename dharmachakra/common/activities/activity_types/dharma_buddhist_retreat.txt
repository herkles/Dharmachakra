activity_dharma_buddhist_retreat = {
	is_shown = {
		highest_held_title_tier > tier_barony
		is_landed = yes
		religion = religion:buddhism_religion
		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
			short_term_gold >= dharma_activity_cost
		}
	}

	can_start = {
		religion = religion:buddhism_religion
	}

	can_start_showing_failures_only = {
		is_available_adult = yes
	}

	is_valid = {
		NOT = {
			has_variable = activity_invalidated
		}
		scope:host = {
			is_landed = yes
			NOT = { is_incapable = yes }
		}
		scope:activity = {
			OR = {
				NOT = { has_variable = starting_faith }
				# We could check whether the place you're going to is still a holy site in the new faith, but then that messes up all the people moving with you, so we just cancel the whole thing.
				scope:host.faith = var:starting_faith
			}
		}

	}

	on_invalidated = {
		# Host becomes unlanded
		if = {
			limit = {
				scope:host = { is_landed = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}
		# Host converted to a different faith
		# Could check to see if new faith allows for this kind of shenanigans, but it's easier to just do it broadly like this
		if = {
			limit = {
				NOT = { scope:host.faith = var:starting_faith }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
				activity_location = { save_scope_as = location }
			}
			every_attending_character = {
				trigger_event = dharma_misc.0010
			}
		}
	}

	on_host_death = {
		scope:activity = {
			set_variable = {
				name = activity_invalidated
			}
		}
	}

	is_location_valid = {
		# Buddhist Temples
		faith.religion = scope:host.faith.religion
		has_building_or_higher = temple_01
		has_holding = yes
	}

	province_filter = realm
	ai_province_filter = realm

	wait_time_before_start = { days = 7 }

	###################
	# OPTIONS
	###################

	special_option_category = special_type

	options = {
		#########
		# LENGTH
		#########
		dharma_buddhist_retreat_length = {
			dharma_buddhist_retreat_length_short = {
				default = yes	
				ai_will_do = {
					value = 10
					if = {
						limit = {
							has_trait = diligent
						}
						add = 10
					}
				}
			}
			dharma_buddhist_retreat_length_medium = {	
				cost = { 
					gold = {
						add = {
							value = 0
							desc = dharma_buddhist_retreat_length_desc
							add = {
								value = 25
								desc = dharma_buddhist_retreat_length_desc
							}
						}
					}
				}	
				ai_will_do = {
					value = 10
					if = {
						limit = {
							short_term_gold <= 25
						}
						subtract = {
							value = 10
						}
					}
				}
			}
			dharma_buddhist_retreat_length_long = {	
				cost = { 
					gold = {
						add = {
							value = 0
							desc = dharma_buddhist_retreat_length_desc
							add = {
								value = 50
								desc = dharma_buddhist_retreat_length_desc
							}
						}
					}
				}	
				ai_will_do = {
					value = 10
					if = {
						limit = {
							has_trait = lazy
						}
						add = 10
					}					
					if = {
						limit = {
							short_term_gold <= 50
						}
						subtract = {
							value = 10
						}
					}
				}
			}
		}
	}

	###################
	# PHASES
	###################

	phases = {
		dharma_buddhist_retreat_phase = {
			is_predefined = yes
			
			on_phase_active = {
				if = {
					limit = { this = scope:host }
					trigger_event = dharma_buddhist_retreat.001
				}
			}

			on_end = {

			}
		}
	}

	max_guest_arrival_delay_time = { days = 3 }

	# desc is only shown in debug AI watch window
	ai_will_do = {
		value = 50
		
		# How much do you care about your faith not liking this?
		if = {
			limit = {
				has_trait = diligent
			}
			add = -25
		}
		if = {
			limit = {
				has_trait = lazy
			}
			add = 25
		}
		
		#Can you actually afford this?
		if = {
			limit = {
				NOT = { can_make_expensive_purchase_trigger = { PRICE = dharma_activity_cost } }
			}
			add = -50
		}
	}

	ai_check_interval = 60

	ai_will_select_province = {
		value = 10
		add = {
			value = scope:score # Derived from province_score
			multiply = 5
		}
		if = {
			limit = {
				this = scope:host.capital_province
			}
			add = {
				value = 20
				desc = "Capital Province preferred"
			}
		}
	}
	
	# Anywhere
	is_location_valid = {

	}

	max_province_icons = 3

	province_score = {
		add = 0
		if = {
			limit = {
				has_holding = no
			}
			add = 50
		}
		# Capital
		if = {
			limit = {
				this = scope:host.capital_province
			}
			add = 50
		}
		if = {
			limit = { has_building_or_higher = temple_01 }
			add = 50
		}
		if = {
			limit = { has_building_or_higher = monastic_schools_01 }
			add = 50
		}
		# Double good / ++
		if = {
			limit = { has_building_or_higher = holy_site_mahabodhi_temple_01 }
			add = 25
		}
		# Good / +
		if = {
			limit = { has_building_or_higher = dambulla_cave_temple_01 }
			add = 10
		}
		if = {
			limit = { has_building_or_higher = pabonka_hermitage_01 }
			add = 10
		}
		if = {
			limit = { has_building_or_higher = scriptorium_01 }
			add = 10
		}
	}
	
	cost = {
		gold = {
			add = {
				value = 0
				add = {
					value = dharma_activity_cost
					desc = hunt_base_cost
				}

			}
		}
	}

	ui_predicted_cost = {
		gold = {
			value = dharma_activity_cost

			add = { # Vacation length
				value = 0
				add = 25
				add = 50
				# Divide by 3 to get the average option cost
				divide = 3
			}

			# Make it a multiple of 5 (rounded up)
			divide = 5 
			ceiling = yes 
			multiply = 5

		}
	}
	cooldown = { days = 3650 }
	
	###################
	# ACTIVITY-SPECIFIC PULSES
	###################
	
	pulse_actions = {

	}

	on_start = {		

	}

	# Once you arrive at the springs, trigger the relevant event(s)
	on_leave_travel_state = {
	}

	on_enter_passive_state = {

	}

	###################
	# GUEST HANDLING
	###################
	
	allow_zero_guest_invites = yes
	max_guests = 10

	guest_invite_rules = {
		rules = {
			# Relations.
			2 = activity_invite_rule_lovers
			2 = activity_invite_rule_rivals_if_appropriate

			# Family.
			3 = activity_invite_rule_extended_family

			# Magnates.
			#4 = activity_invite_neighbouring_rulers

			# Misc landless.
			5 = activity_invite_rule_knights

			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_rule_friends
			1 = activity_invite_rule_close_family
			#1 = activity_invite_rule_liege
			#1 = activity_invite_rule_vassals
			#2 = activity_invite_rule_fellow_vassals
			3 = activity_invite_rule_courtiers
			4 = activity_invite_rule_guests
			1 = activity_invite_spouses
		}
	}

	can_be_activity_guest = {
		is_adult = yes
		is_available = yes
		in_diplomatic_range = scope:host
		is_landed = no
		# NOT = {
		# 	is_primary_heir_of = scope:actor
		# }
	}


	host_intents = {
		intents = { dharma_buddhist_retreat_contemplation_intent }
		default = dharma_buddhist_retreat_contemplation_intent
	}

	guest_intents = {
		intents = { dharma_buddhist_retreat_contemplation_intent }
		default = dharma_buddhist_retreat_contemplation_intent
	}
	
	on_complete = {

	}

	# Travel
	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	background = { #coast
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_coastal = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/RICE_iberian_beach.dds"
		environment = "environment_event_desert"
		ambience = "event:/DLC/FP1/SFX/Events/event_beached_longships"
	}
	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				OR = {
					graphical_wilderness_forest_trigger = yes
					graphical_wilderness_mountains_trigger = yes
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/RICE_galicia_woods.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	background = {
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
		}
		texture = "gfx/interface/illustrations/event_scenes/RICE_andalusian_countryside.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	# Fallback
	background = {
		texture = "gfx/interface/illustrations/event_scenes/RICE_granada_alhambra_exterior.dds"
		environment = "environment_event_garden"
		ambience = "event:/SFX/Events/Backgrounds/castle_garden_day"
	}

	window_characters = {

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = admiration
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = personality_content
			}
		}
		
		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = happiness
			}
		}
		
		travel_host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = thinking
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = reading
			}
		}
	}
}
